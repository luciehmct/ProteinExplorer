import openai
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Create OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

def analyze_protein(protein_data, detail_level="short", language="en"):
    """
    Generates an explanation about a protein using OpenAI's API.
    
    :param protein_data: Dictionary containing protein details.
    :param detail_level: "short" for a brief summary, "detailed" for an in-depth explanation.
    :param language: "en" for English, "fr" for French.
    :return: A string response generated by ChatGPT.
    """
    
    # Define the level of detail
    if detail_level == "short":
        explanation_type = "Provide a brief and simple explanation."
    else:
        explanation_type = "Give a detailed scientific explanation, including potential applications and biological significance."

    # Define the language
    if language == "fr":
        lang_instruction = "Réponds en français."
    else:
        lang_instruction = "Respond in English."
    
    prompt = f"""
    {lang_instruction}
    
    Here are details about a protein:
    - ID: {protein_data['structureId']}
    - Classification: {protein_data['classification']}
    - Experimental Technique: {protein_data['experimentalTechnique']}
    - Macromolecule Type: {protein_data['macromoleculeType']}
    - Molecular Weight: {protein_data['structureMolecularWeight']} Da
    - Resolution: {protein_data['resolution']} Å
    - pH: {protein_data.get('phValue', 'Not available')}

    {explanation_type}

    Make sure your explanation is well-structured and concludes properly to avoid truncation.

    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a structural biology expert."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500 if detail_level == "detailed" else 250
        )
        return response.choices[0].message.content
    
    except Exception as e:
        return f"Error during analysis: {str(e)}"
